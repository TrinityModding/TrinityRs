// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod titan {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod model {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TRPOKECFGOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TRPOKECFG<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TRPOKECFG<'a> {
  type Inner = TRPOKECFG<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TRPOKECFG<'a> {
  pub const VT_UNK_0: flatbuffers::VOffsetT = 4;
  pub const VT_UNK_1: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 10;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 12;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 16;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 18;
  pub const VT_UNK_8: flatbuffers::VOffsetT = 20;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 22;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 24;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 26;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TRPOKECFG { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TRPOKECFGArgs
  ) -> flatbuffers::WIPOffset<TRPOKECFG<'bldr>> {
    let mut builder = TRPOKECFGBuilder::new(_fbb);
    builder.add_unk_12(args.unk_12);
    builder.add_unk_11(args.unk_11);
    builder.add_unk_10(args.unk_10);
    builder.add_unk_9(args.unk_9);
    builder.add_unk_8(args.unk_8);
    builder.add_unk_7(args.unk_7);
    builder.add_unk_6(args.unk_6);
    builder.add_unk_5(args.unk_5);
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    builder.add_unk_2(args.unk_2);
    builder.add_unk_1(args.unk_1);
    builder.add_unk_0(args.unk_0);
    builder.finish()
  }

  pub fn unpack(&self) -> TRPOKECFGT {
    let unk_0 = self.unk_0();
    let unk_1 = self.unk_1();
    let unk_2 = self.unk_2();
    let unk_3 = self.unk_3();
    let unk_4 = self.unk_4();
    let unk_5 = self.unk_5();
    let unk_6 = self.unk_6();
    let unk_7 = self.unk_7();
    let unk_8 = self.unk_8();
    let unk_9 = self.unk_9();
    let unk_10 = self.unk_10();
    let unk_11 = self.unk_11();
    let unk_12 = self.unk_12();
    TRPOKECFGT {
      unk_0,
      unk_1,
      unk_2,
      unk_3,
      unk_4,
      unk_5,
      unk_6,
      unk_7,
      unk_8,
      unk_9,
      unk_10,
      unk_11,
      unk_12,
    }
  }

  #[inline]
  pub fn unk_0(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(TRPOKECFG::VT_UNK_0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_1(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_1, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_2(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_2, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_3(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_3, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_4, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_5(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_5, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_6(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_6, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_7(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_7, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_8(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_8, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_9(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_9, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_10, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_11(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_11, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn unk_12(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(TRPOKECFG::VT_UNK_12, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TRPOKECFG<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("unk_0", Self::VT_UNK_0, false)?
     .visit_field::<f32>("unk_1", Self::VT_UNK_1, false)?
     .visit_field::<f32>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<f32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<f32>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<f32>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<f32>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<f32>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<f32>("unk_8", Self::VT_UNK_8, false)?
     .visit_field::<f32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<f32>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<f32>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<f32>("unk_12", Self::VT_UNK_12, false)?
     .finish();
    Ok(())
  }
}
pub struct TRPOKECFGArgs {
    pub unk_0: u8,
    pub unk_1: f32,
    pub unk_2: f32,
    pub unk_3: f32,
    pub unk_4: f32,
    pub unk_5: f32,
    pub unk_6: f32,
    pub unk_7: f32,
    pub unk_8: f32,
    pub unk_9: f32,
    pub unk_10: f32,
    pub unk_11: f32,
    pub unk_12: f32,
}
impl<'a> Default for TRPOKECFGArgs {
  #[inline]
  fn default() -> Self {
    TRPOKECFGArgs {
      unk_0: 0,
      unk_1: 0.0,
      unk_2: 0.0,
      unk_3: 0.0,
      unk_4: 0.0,
      unk_5: 0.0,
      unk_6: 0.0,
      unk_7: 0.0,
      unk_8: 0.0,
      unk_9: 0.0,
      unk_10: 0.0,
      unk_11: 0.0,
      unk_12: 0.0,
    }
  }
}

pub struct TRPOKECFGBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TRPOKECFGBuilder<'a, 'b> {
  #[inline]
  pub fn add_unk_0(&mut self, unk_0: u8) {
    self.fbb_.push_slot::<u8>(TRPOKECFG::VT_UNK_0, unk_0, 0);
  }
  #[inline]
  pub fn add_unk_1(&mut self, unk_1: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_1, unk_1, 0.0);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_2, unk_2, 0.0);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_3, unk_3, 0.0);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_4, unk_4, 0.0);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_5, unk_5, 0.0);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_6, unk_6, 0.0);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_7, unk_7, 0.0);
  }
  #[inline]
  pub fn add_unk_8(&mut self, unk_8: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_8, unk_8, 0.0);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_9, unk_9, 0.0);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_10, unk_10, 0.0);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_11, unk_11, 0.0);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: f32) {
    self.fbb_.push_slot::<f32>(TRPOKECFG::VT_UNK_12, unk_12, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TRPOKECFGBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TRPOKECFGBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TRPOKECFG<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TRPOKECFG<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TRPOKECFG");
      ds.field("unk_0", &self.unk_0());
      ds.field("unk_1", &self.unk_1());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("unk_8", &self.unk_8());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TRPOKECFGT {
  pub unk_0: u8,
  pub unk_1: f32,
  pub unk_2: f32,
  pub unk_3: f32,
  pub unk_4: f32,
  pub unk_5: f32,
  pub unk_6: f32,
  pub unk_7: f32,
  pub unk_8: f32,
  pub unk_9: f32,
  pub unk_10: f32,
  pub unk_11: f32,
  pub unk_12: f32,
}
impl Default for TRPOKECFGT {
  fn default() -> Self {
    Self {
      unk_0: 0,
      unk_1: 0.0,
      unk_2: 0.0,
      unk_3: 0.0,
      unk_4: 0.0,
      unk_5: 0.0,
      unk_6: 0.0,
      unk_7: 0.0,
      unk_8: 0.0,
      unk_9: 0.0,
      unk_10: 0.0,
      unk_11: 0.0,
      unk_12: 0.0,
    }
  }
}
impl TRPOKECFGT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<TRPOKECFG<'b>> {
    let unk_0 = self.unk_0;
    let unk_1 = self.unk_1;
    let unk_2 = self.unk_2;
    let unk_3 = self.unk_3;
    let unk_4 = self.unk_4;
    let unk_5 = self.unk_5;
    let unk_6 = self.unk_6;
    let unk_7 = self.unk_7;
    let unk_8 = self.unk_8;
    let unk_9 = self.unk_9;
    let unk_10 = self.unk_10;
    let unk_11 = self.unk_11;
    let unk_12 = self.unk_12;
    TRPOKECFG::create(_fbb, &TRPOKECFGArgs{
      unk_0,
      unk_1,
      unk_2,
      unk_3,
      unk_4,
      unk_5,
      unk_6,
      unk_7,
      unk_8,
      unk_9,
      unk_10,
      unk_11,
      unk_12,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TRPOKECFG`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpokecfg_unchecked`.
pub fn root_as_trpokecfg(buf: &[u8]) -> Result<TRPOKECFG, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TRPOKECFG>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TRPOKECFG` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trpokecfg_unchecked`.
pub fn size_prefixed_root_as_trpokecfg(buf: &[u8]) -> Result<TRPOKECFG, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TRPOKECFG>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TRPOKECFG` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpokecfg_unchecked`.
pub fn root_as_trpokecfg_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPOKECFG<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TRPOKECFG<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TRPOKECFG` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trpokecfg_unchecked`.
pub fn size_prefixed_root_as_trpokecfg_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRPOKECFG<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TRPOKECFG<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TRPOKECFG and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TRPOKECFG`.
pub unsafe fn root_as_trpokecfg_unchecked(buf: &[u8]) -> TRPOKECFG {
  flatbuffers::root_unchecked::<TRPOKECFG>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TRPOKECFG and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TRPOKECFG`.
pub unsafe fn size_prefixed_root_as_trpokecfg_unchecked(buf: &[u8]) -> TRPOKECFG {
  flatbuffers::size_prefixed_root_unchecked::<TRPOKECFG>(buf)
}
pub const TRPOKECFG_EXTENSION: &str = "trpokecfg";

#[inline]
pub fn finish_trpokecfg_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TRPOKECFG<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trpokecfg_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TRPOKECFG<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Model
}  // pub mod Titan


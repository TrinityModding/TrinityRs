// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod titan {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod model {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vec3f, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec3f(pub [u8; 12]);
impl Default for Vec3f { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vec3f {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec3f")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec3f {}
impl<'a> flatbuffers::Follow<'a> for Vec3f {
  type Inner = &'a Vec3f;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3f>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3f {
  type Inner = &'a Vec3f;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3f>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3f {
    type Output = Vec3f;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec3f as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec3f {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec3f {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn unpack(&self) -> Vec3fT {
    Vec3fT {
      x: self.x(),
      y: self.y(),
      z: self.z(),
    }
  }
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct Vec3fT {
  pub x: f32,
  pub y: f32,
  pub z: f32,
}
impl Vec3fT {
  pub fn pack(&self) -> Vec3f {
    Vec3f::new(
      self.x,
      self.y,
      self.z,
    )
  }
}

// struct Vec3i, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec3i(pub [u8; 12]);
impl Default for Vec3i { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Vec3i {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec3i")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec3i {}
impl<'a> flatbuffers::Follow<'a> for Vec3i {
  type Inner = &'a Vec3i;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec3i>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec3i {
  type Inner = &'a Vec3i;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec3i>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec3i {
    type Output = Vec3i;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec3i as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Vec3i {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec3i {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: i32,
    y: i32,
    z: i32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<<i32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<i32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn unpack(&self) -> Vec3iT {
    Vec3iT {
      x: self.x(),
      y: self.y(),
      z: self.z(),
    }
  }
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct Vec3iT {
  pub x: i32,
  pub y: i32,
  pub z: i32,
}
impl Vec3iT {
  pub fn pack(&self) -> Vec3i {
    Vec3i::new(
      self.x,
      self.y,
      self.z,
    )
  }
}

pub enum Table2Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Table2<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Table2<'a> {
  type Inner = Table2<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Table2<'a> {
  pub const VT_SHAPE_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Table2 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args Table2Args<'args>
  ) -> flatbuffers::WIPOffset<Table2<'bldr>> {
    let mut builder = Table2Builder::new(_fbb);
    if let Some(x) = args.shape_name { builder.add_shape_name(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> Table2T {
    let shape_name = self.shape_name().map(|x| {
      x.to_string()
    });
    Table2T {
      shape_name,
    }
  }

  #[inline]
  pub fn shape_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Table2::VT_SHAPE_NAME, None)}
  }
}

impl flatbuffers::Verifiable for Table2<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shape_name", Self::VT_SHAPE_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct Table2Args<'a> {
    pub shape_name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Table2Args<'a> {
  #[inline]
  fn default() -> Self {
    Table2Args {
      shape_name: None,
    }
  }
}

pub struct Table2Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> Table2Builder<'a, 'b> {
  #[inline]
  pub fn add_shape_name(&mut self, shape_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Table2::VT_SHAPE_NAME, shape_name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> Table2Builder<'a, 'b> {
    let start = _fbb.start_table();
    Table2Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Table2<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Table2<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Table2");
      ds.field("shape_name", &self.shape_name());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Table2T {
  pub shape_name: Option<String>,
}
impl Default for Table2T {
  fn default() -> Self {
    Self {
      shape_name: None,
    }
  }
}
impl Table2T {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<Table2<'b>> {
    let shape_name = self.shape_name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Table2::create(_fbb, &Table2Args{
      shape_name,
    })
  }
}
pub enum LookupTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LookupTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LookupTable<'a> {
  type Inner = LookupTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LookupTable<'a> {
  pub const VT_SHAPE_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_MESH_NAMES: flatbuffers::VOffsetT = 10;
  pub const VT_BASE_SHAPE: flatbuffers::VOffsetT = 12;
  pub const VT_SOME_POSITIONS: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LookupTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LookupTableArgs<'args>
  ) -> flatbuffers::WIPOffset<LookupTable<'bldr>> {
    let mut builder = LookupTableBuilder::new(_fbb);
    if let Some(x) = args.some_positions { builder.add_some_positions(x); }
    if let Some(x) = args.base_shape { builder.add_base_shape(x); }
    if let Some(x) = args.mesh_names { builder.add_mesh_names(x); }
    if let Some(x) = args.unk_2 { builder.add_unk_2(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.shape_name { builder.add_shape_name(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LookupTableT {
    let shape_name = self.shape_name().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let unk_2 = self.unk_2().map(|x| {
      x.unpack()
    });
    let mesh_names = self.mesh_names().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let base_shape = self.base_shape().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    let some_positions = self.some_positions().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    LookupTableT {
      shape_name,
      name,
      unk_2,
      mesh_names,
      base_shape,
      some_positions,
    }
  }

  #[inline]
  pub fn shape_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LookupTable::VT_SHAPE_NAME, None)}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LookupTable::VT_NAME, None)}
  }
  #[inline]
  pub fn unk_2(&self) -> Option<&'a Vec3i> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3i>(LookupTable::VT_UNK_2, None)}
  }
  #[inline]
  pub fn mesh_names(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LookupTable::VT_MESH_NAMES, None)}
  }
  #[inline]
  pub fn base_shape(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Table2<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Table2>>>>(LookupTable::VT_BASE_SHAPE, None)}
  }
  #[inline]
  pub fn some_positions(&self) -> Option<flatbuffers::Vector<'a, Vec3f>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vec3f>>>(LookupTable::VT_SOME_POSITIONS, None)}
  }
}

impl flatbuffers::Verifiable for LookupTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shape_name", Self::VT_SHAPE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<Vec3i>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("mesh_names", Self::VT_MESH_NAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Table2>>>>("base_shape", Self::VT_BASE_SHAPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vec3f>>>("some_positions", Self::VT_SOME_POSITIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct LookupTableArgs<'a> {
    pub shape_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_2: Option<&'a Vec3i>,
    pub mesh_names: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub base_shape: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Table2<'a>>>>>,
    pub some_positions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vec3f>>>,
}
impl<'a> Default for LookupTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    LookupTableArgs {
      shape_name: None,
      name: None,
      unk_2: None,
      mesh_names: None,
      base_shape: None,
      some_positions: None,
    }
  }
}

pub struct LookupTableBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LookupTableBuilder<'a, 'b> {
  #[inline]
  pub fn add_shape_name(&mut self, shape_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LookupTable::VT_SHAPE_NAME, shape_name);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LookupTable::VT_NAME, name);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: &Vec3i) {
    self.fbb_.push_slot_always::<&Vec3i>(LookupTable::VT_UNK_2, unk_2);
  }
  #[inline]
  pub fn add_mesh_names(&mut self, mesh_names: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LookupTable::VT_MESH_NAMES, mesh_names);
  }
  #[inline]
  pub fn add_base_shape(&mut self, base_shape: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Table2<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LookupTable::VT_BASE_SHAPE, base_shape);
  }
  #[inline]
  pub fn add_some_positions(&mut self, some_positions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vec3f>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LookupTable::VT_SOME_POSITIONS, some_positions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LookupTableBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LookupTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LookupTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LookupTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LookupTable");
      ds.field("shape_name", &self.shape_name());
      ds.field("name", &self.name());
      ds.field("unk_2", &self.unk_2());
      ds.field("mesh_names", &self.mesh_names());
      ds.field("base_shape", &self.base_shape());
      ds.field("some_positions", &self.some_positions());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LookupTableT {
  pub shape_name: Option<String>,
  pub name: Option<String>,
  pub unk_2: Option<Vec3iT>,
  pub mesh_names: Option<Vec<String>>,
  pub base_shape: Option<Vec<Table2T>>,
  pub some_positions: Option<Vec<Vec3fT>>,
}
impl Default for LookupTableT {
  fn default() -> Self {
    Self {
      shape_name: None,
      name: None,
      unk_2: None,
      mesh_names: None,
      base_shape: None,
      some_positions: None,
    }
  }
}
impl LookupTableT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<LookupTable<'b>> {
    let shape_name = self.shape_name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let unk_2_tmp = self.unk_2.as_ref().map(|x| x.pack());
    let unk_2 = unk_2_tmp.as_ref();
    let mesh_names = self.mesh_names.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let base_shape = self.base_shape.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let some_positions = self.some_positions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    LookupTable::create(_fbb, &LookupTableArgs{
      shape_name,
      name,
      unk_2,
      mesh_names,
      base_shape,
      some_positions,
    })
  }
}
pub enum TRLTTOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TRLTT<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TRLTT<'a> {
  type Inner = TRLTT<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TRLTT<'a> {
  pub const VT_RES_0: flatbuffers::VOffsetT = 4;
  pub const VT_ENTRIES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TRLTT { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TRLTTArgs<'args>
  ) -> flatbuffers::WIPOffset<TRLTT<'bldr>> {
    let mut builder = TRLTTBuilder::new(_fbb);
    if let Some(x) = args.entries { builder.add_entries(x); }
    builder.add_res_0(args.res_0);
    builder.finish()
  }

  pub fn unpack(&self) -> TRLTTT {
    let res_0 = self.res_0();
    let entries = self.entries().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    TRLTTT {
      res_0,
      entries,
    }
  }

  #[inline]
  pub fn res_0(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TRLTT::VT_RES_0, Some(0)).unwrap()}
  }
  #[inline]
  pub fn entries(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LookupTable<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LookupTable>>>>(TRLTT::VT_ENTRIES, None)}
  }
}

impl flatbuffers::Verifiable for TRLTT<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("res_0", Self::VT_RES_0, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LookupTable>>>>("entries", Self::VT_ENTRIES, false)?
     .finish();
    Ok(())
  }
}
pub struct TRLTTArgs<'a> {
    pub res_0: u32,
    pub entries: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LookupTable<'a>>>>>,
}
impl<'a> Default for TRLTTArgs<'a> {
  #[inline]
  fn default() -> Self {
    TRLTTArgs {
      res_0: 0,
      entries: None,
    }
  }
}

pub struct TRLTTBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TRLTTBuilder<'a, 'b> {
  #[inline]
  pub fn add_res_0(&mut self, res_0: u32) {
    self.fbb_.push_slot::<u32>(TRLTT::VT_RES_0, res_0, 0);
  }
  #[inline]
  pub fn add_entries(&mut self, entries: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LookupTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TRLTT::VT_ENTRIES, entries);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TRLTTBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TRLTTBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TRLTT<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TRLTT<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TRLTT");
      ds.field("res_0", &self.res_0());
      ds.field("entries", &self.entries());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TRLTTT {
  pub res_0: u32,
  pub entries: Option<Vec<LookupTableT>>,
}
impl Default for TRLTTT {
  fn default() -> Self {
    Self {
      res_0: 0,
      entries: None,
    }
  }
}
impl TRLTTT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<TRLTT<'b>> {
    let res_0 = self.res_0;
    let entries = self.entries.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    TRLTT::create(_fbb, &TRLTTArgs{
      res_0,
      entries,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TRLTT`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trltt_unchecked`.
pub fn root_as_trltt(buf: &[u8]) -> Result<TRLTT, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TRLTT>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TRLTT` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_trltt_unchecked`.
pub fn size_prefixed_root_as_trltt(buf: &[u8]) -> Result<TRLTT, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TRLTT>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TRLTT` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trltt_unchecked`.
pub fn root_as_trltt_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRLTT<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TRLTT<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TRLTT` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_trltt_unchecked`.
pub fn size_prefixed_root_as_trltt_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TRLTT<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TRLTT<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TRLTT and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TRLTT`.
pub unsafe fn root_as_trltt_unchecked(buf: &[u8]) -> TRLTT {
  flatbuffers::root_unchecked::<TRLTT>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TRLTT and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TRLTT`.
pub unsafe fn size_prefixed_root_as_trltt_unchecked(buf: &[u8]) -> TRLTT {
  flatbuffers::size_prefixed_root_unchecked::<TRLTT>(buf)
}
#[inline]
pub fn finish_trltt_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<TRLTT<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_trltt_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<TRLTT<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Model
}  // pub mod Titan

